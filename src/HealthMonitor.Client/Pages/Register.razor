@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 flex items-center justify-center p-4">
    <div class="max-w-md w-full">
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900">Health Monitor</h1>
            <p class="mt-2 text-gray-600">Создайте аккаунт для начала работы</p>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-8">
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <InputText id="email" 
                                 @bind-Value="registerModel.Email"
                                 class="mt-1 block w-full rounded-lg border-gray-300" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-sm text-red-600" />
                    </div>

                    <div>
                        <label for="password" class="block text-sm font-medium text-gray-700">Пароль</label>
                        <InputText type="password" 
                                 id="password" 
                                 @bind-Value="registerModel.Password"
                                 class="mt-1 block w-full rounded-lg border-gray-300" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-sm text-red-600" />
                    </div>

                    <div>
                        <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Подтверждение пароля</label>
                        <InputText type="password" 
                                 id="confirmPassword" 
                                 @bind-Value="registerModel.ConfirmPassword"
                                 class="mt-1 block w-full rounded-lg border-gray-300" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-sm text-red-600" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-red-50 text-red-800 rounded-lg p-4">
                            @errorMessage
                        </div>
                    }

                    <button type="submit" 
                            disabled="@isProcessing"
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        @if (isProcessing)
                        {
                            <span class="inline-block animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></span>
                        }
                        Создать аккаунт
                    </button>

                    <div class="text-center text-sm">
                        <span class="text-gray-600">Уже есть аккаунт?</span>
                        <a href="login" class="ml-1 font-medium text-blue-600 hover:text-blue-500">
                            Войти
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerModel = new();
    private string errorMessage = string.Empty;
    private bool isProcessing = false;

    private async Task HandleRegistration()
    {
        try
        {
            isProcessing = true;
            errorMessage = string.Empty;

            var result = await AuthService.RegisterAsync(registerModel);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Не удалось создать аккаунт. Попробуйте другой email.";
            }
        }
        catch
        {
            errorMessage = "Произошла ошибка при регистрации";
        }
        finally
        {
            isProcessing = false;
        }
    }
}