@page "/health"
@inject IHealthService HealthService
@inject IJSRuntime JS
@attribute [Authorize]

<div class="min-h-screen bg-gray-50 p-4 md:p-6">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Health</h1>
                <p class="text-sm text-gray-500">Track your health metrics</p>
            </div>

            <div class="flex flex-col sm:flex-row gap-2">
                <button @onclick="ExportData"
                        class="flex items-center justify-center px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                    <span class="material-icons mr-2 text-gray-500">download</span>
                    Export
                </button>
                <button @onclick="ShowAddMetricModal"
                        class="flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                    <span class="material-icons mr-2">add</span>
                    Add Measurement
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center py-12">
                <div class="animate-spin rounded-full h-12 w-12 border-4 border-blue-100 border-t-blue-600"></div>
            </div>
        }
        else
        {
            <!-- Metrics Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @foreach (var type in Enum.GetValues<MetricType>())
                {
                    <div class="bg-white rounded-xl shadow-sm p-4 md:p-6 border border-gray-100 hover:border-blue-200 transition-colors">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-sm font-medium text-gray-500">@GetMetricName(type)</h3>
                            <div class="@GetMetricBadgeClass(type) p-2 rounded-lg">
                                <span class="material-icons text-lg">@GetMetricIcon(type)</span>
                            </div>
                        </div>

                        <div class="flex items-baseline gap-1">
                            <span class="text-2xl font-bold @GetValueColorClass(type)">
                                @GetLatestValue(type)
                            </span>
                            <span class="text-sm text-gray-500">@GetMetricUnit(type)</span>
                        </div>

                        <div class="flex items-center justify-between mt-2">
                            <div class="flex items-center gap-1">
                                <span class="material-icons text-sm @GetTrendColor(GetTrend(type))">
                                    @GetTrendIcon(GetTrend(type))
                                </span>
                                <span class="text-sm text-gray-500">@GetTrendText(GetTrend(type))</span>
                            </div>
                            <span class="text-xs text-gray-500">
                                Range: @GetNormalRange(type)
                            </span>
                        </div>
                    </div>
                }
            </div>

            <!-- Recent Measurements -->
            <div class="mt-6 bg-white rounded-xl shadow-sm">
                <div class="p-4 border-b border-gray-100">
                    <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                        <h2 class="text-lg font-semibold">Recent Measurements</h2>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var days in new[] { 7, 30, 90 })
                            {
                                <button @onclick="() => filterDays = days"
                                        class="@GetFilterButtonClass(days) flex-1 sm:flex-none">
                                    @days days
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Metric</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"></th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var metric in GetFilteredMetrics())
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @metric.Date.ToLocalTime().ToString("g")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetMetricBadgeClass(metric.Type)">
                                            @GetMetricName(metric.Type)
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        <span class="@GetValueColorClass(metric)">
                                            @metric.Value @metric.Unit
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">
                                        @metric.Notes
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <button @onclick="() => DeleteMetric(metric.Id)"
                                                class="text-red-600 hover:text-red-900">
                                            <span class="material-icons">delete</span>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HealthSummary summary = new();
    private bool isLoading = true;
    private string? errorMessage;
    private int filterDays = 30;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            summary = await HealthService.GetSummaryAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load health data";
            Console.WriteLine($"Error loading health data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleAddMetric()
    {
        try
        {
            isLoading = true;
            await HealthService.AddMetricAsync(newMetric);
            showAddMetricModal = false;
            await LoadData();
        }
        catch
        {
            errorMessage = "Failed to add measurement";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteMetric(int id)
    {
        try
        {
            isLoading = true;
            await HealthService.DeleteMetricAsync(id);
            await LoadData();
        }
        catch
        {
            errorMessage = "Failed to delete measurement";
        }
        finally
        {
            isLoading = false;
        }
    }
    private string GetMetricName(MetricType type) => type switch
    {
        MetricType.Height => "Height",
        MetricType.Weight => "Weight",
        MetricType.BloodPressure => "Blood Pressure",
        MetricType.HeartRate => "Heart Rate",
        MetricType.Temperature => "Temperature",
        MetricType.BloodSugar => "Blood Sugar",
        MetricType.Oxygen => "Oxygen",
        _ => type.ToString()
    };

    private string GetMetricIcon(MetricType type) => type switch
    {
        MetricType.Height => "height",
        MetricType.Weight => "monitor_weight",
        MetricType.BloodPressure => "favorite",
        MetricType.HeartRate => "favorite_border",
        MetricType.Temperature => "thermostat",
        MetricType.BloodSugar => "water_drop",
        MetricType.Oxygen => "air",
        _ => "speed"
    };

    private string GetMetricUnit(MetricType type) => type switch
    {
        MetricType.Height => "cm",
        MetricType.Weight => "kg",
        MetricType.BloodPressure => "mmHg",
        MetricType.HeartRate => "bpm",
        MetricType.Temperature => "°C",
        MetricType.BloodSugar => "mmol/L",
        MetricType.Oxygen => "%",
        _ => ""
    };

    private string GetNormalRange(MetricType type) => type switch
    {
        MetricType.Temperature => "36.6-37.2°C",
        MetricType.BloodPressure => "120/80 mmHg",
        MetricType.HeartRate => "60-100 bpm",
        MetricType.Oxygen => "95-100%",
        MetricType.BloodSugar => "4.0-5.4 mmol/L",
        _ => "Individual"
    };

    private string GetMetricBadgeClass(MetricType type) => type switch
    {
        MetricType.Height => "bg-blue-100 text-blue-800",
        MetricType.Weight => "bg-green-100 text-green-800",
        MetricType.BloodPressure => "bg-red-100 text-red-800",
        MetricType.HeartRate => "bg-purple-100 text-purple-800",
        MetricType.Temperature => "bg-orange-100 text-orange-800",
        MetricType.BloodSugar => "bg-yellow-100 text-yellow-800",
        MetricType.Oxygen => "bg-indigo-100 text-indigo-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetValueColorClass(HealthMetrics metric) => metric.Type switch
    {
        MetricType.Temperature when metric.Value > 37.5 => "text-red-600",
        MetricType.Temperature when metric.Value < 36 => "text-blue-600",
        MetricType.Oxygen when metric.Value < 95 => "text-red-600",
        MetricType.BloodPressure when metric.Value > 140 => "text-red-600",
        MetricType.BloodPressure when metric.Value < 90 => "text-blue-600",
        _ => "text-gray-900"
    };

    private string GetValueColorClass(MetricType type)
    {
        var value = GetLatestValue(type);
        if (!double.TryParse(value, out var numValue))
            return "text-gray-900";

        return type switch
        {
            MetricType.Temperature when numValue > 37.5 => "text-red-600",
            MetricType.Temperature when numValue < 36 => "text-blue-600",
            MetricType.Oxygen when numValue < 95 => "text-red-600",
            MetricType.BloodPressure when numValue > 140 => "text-red-600",
            MetricType.BloodPressure when numValue < 90 => "text-blue-600",
            _ => "text-gray-900"
        };
    }

    private string GetFilterButtonClass(int days)
    {
        var baseClass = "px-3 py-1 text-sm rounded-lg transition-colors";
        return days == filterDays
            ? $"{baseClass} bg-blue-100 text-blue-700"
            : $"{baseClass} bg-gray-100 text-gray-700 hover:bg-gray-200";
    }

    private string GetLatestValue(MetricType type)
    {
        var metric = summary.RecentMetrics
            .Where(m => m.Type == type)
            .OrderByDescending(m => m.Date)
            .FirstOrDefault();
        
        return metric?.Value.ToString("F1") ?? "No data";
    }

    private string GetTrend(MetricType type)
    {
        var metrics = summary.RecentMetrics
            .Where(m => m.Type == type)
            .OrderBy(m => m.Date)
            .Take(5)
            .ToList();

        if (metrics.Count < 2) return "stable";

        var first = metrics.First().Value;
        var last = metrics.Last().Value;
        var diff = last - first;
        var threshold = first * 0.05; // 5% change

        return diff switch
        {
            > 0 when Math.Abs(diff) > threshold => "up",
            < 0 when Math.Abs(diff) > threshold => "down",
            _ => "stable"
        };
    }

    private string GetTrendColor(string trend) => trend switch
    {
        "up" => "text-green-500",
        "down" => "text-red-500",
        _ => "text-gray-500"
    };

    private string GetTrendIcon(string trend) => trend switch
    {
        "up" => "trending_up",
        "down" => "trending_down",
        _ => "trending_flat"
    };

    private string GetTrendText(string trend) => trend switch
    {
        "up" => "Increasing",
        "down" => "Decreasing",
        _ => "Stable"
    };

    private List<HealthMetrics> GetFilteredMetrics()
    {
        var cutoffDate = DateTime.UtcNow.AddDays(-filterDays);
        return summary.RecentMetrics
            .Where(m => m.Date >= cutoffDate)
            .OrderByDescending(m => m.Date)
            .ToList();
    }

    private async Task ExportData()
    {
        try
        {
            var csv = new StringBuilder();
            csv.AppendLine("Date,Metric,Value,Unit,Notes");
            
            foreach (var metric in summary.RecentMetrics)
            {
                csv.AppendLine($"{metric.Date:g},{GetMetricName(metric.Type)},{metric.Value},{metric.Unit},{metric.Notes}");
            }

            var bytes = Encoding.UTF8.GetBytes(csv.ToString());
            var base64 = Convert.ToBase64String(bytes);
            await JS.InvokeVoidAsync("downloadFile", "health_metrics.csv", base64);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to export data";
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private void ShowAddMetricModal()
    {
        newMetric = new HealthMetricRequest();
        showAddMetricModal = true;
    }

    private HealthMetricRequest newMetric = new();
    private bool showAddMetricModal;
}